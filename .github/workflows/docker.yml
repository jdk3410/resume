name: Docker Build and Push to GCP Artifact Registry, deploy to GKE, and update Cloudflare DNS

on:
  push:
    branches:
       - master
       - dev
    paths-ignore:
      - 'README.md'
      - '.github/**'
  schedule:
    - cron: '0 14 1 * *' 
    # We need to rebuild this monthly to get the latest security updates and to get the new LetsEncrypt certificate
    # This only runs on the default branch, which is master. If we want to run this on both branches automatically we have to split this in to two workflows
  workflow_dispatch:  

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # All the GCP stuff
      PROJECT_ID: ${{ secrets.DEV_GCP_PROJECT_ID }}
      GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}
      IMAGE: ${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.DEV_GCP_PROJECT_ID }}/resume-dev/resume-dev # this needs to be fixed / varibalized
      BUCKET_NAME: ${{ vars.BUCKET_NAME }}
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      
      # All the AWS stuff - leaving here for reference
      #AWS_REGION: ${{ secrets.AWS_REGION }}
      #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      #ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #TASK: ${{ vars.TASK }} # This is the name of the task definition for ECS, set in the repository variables
      #BUCKET_NAME: ${{ vars.BUCKET_NAME }} # This is the name of the S3 bucket where the certificates are stored, set in the repository variables
      #DOMAIN_NAME: ${{ vars.DOMAIN_NAME }} # This is the domain name of the website, set in the repository variables
      

      IMAGE_TAG: ${{ github.sha }}
      SUB_DOMAIN: ${{ github.ref == 'refs/heads/dev' && 'dev' || github.ref == 'refs/heads/master' && 'www' || '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm test
      run: |
        npm install
        npm test
      if: github.ref == 'refs/heads/dev' # The plan is to merge dev into master only if the tests pass. Since the dev branch is being pulled into master, we don't need to run the tests again for master
      # End of CI

    - name: Set subdomain for dev branch
      run: echo "SUB_DOMAIN=dev" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/dev'
    
    - name: Set subdomain for master branch
      run: echo "SUB_DOMAIN=www" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/master'
    
      # Start of CD
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Google Cloud SDK for GCP Project
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

# This isn't going to do anything since k8s will have to terminate SSL but it'll be good to check permissions anyway
    - name: Copy certificates from GCS
      run: |
        mkdir -p ./letsencrypt/live/${{ env.DOMAIN_NAME }}/
        gsutil cp gs://${{ env.BUCKET_NAME }}/${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}/fullchain.pem ./letsencrypt/live/${{ env.DOMAIN_NAME }}/fullchain.pem
        gsutil cp gs://${{ env.BUCKET_NAME }}/${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}/privkey.pem ./letsencrypt/live/${{ env.DOMAIN_NAME }}/privkey.pem

    - name: Update index.html with run number
      run: sed -i 's/RUN_NUMBER_PLACEHOLDER/${{ github.run_number }}/g' ./public/index.html
    
    - name: Authenticate Docker to Artifact Registry
      run: echo "${{ secrets.GCP_SA_KEY }}" | docker login -u _json_key --password-stdin https://${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}:${{ github.sha }}
          build-args: |
            REACT_APP_GIT_BRANCH=${{ github.ref_name }}
            REACT_APP_VERSION=${{ github.run_number }}
            DOMAIN_NAME=${{ env.DOMAIN_NAME }}
      
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}

    - name: Set up Google Cloud SDK for GKE Project
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GKE_PROJECT_ID }}
        
    
    - name: Set NAMESPACE
      run: echo "NAMESPACE=$(echo ${{ env.DOMAIN_NAME }} | sed 's/\.com//')" >> $GITHUB_ENV
    
    - name: Deploy to GKE
      run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
          kubectl set image deployment/resume-dev resume-dev=${{ env.IMAGE }}:${{ github.sha }} --namespace=$NAMESPACE
          kubectl rollout status deployment/resume-dev --namespace=$NAMESPACE

    # Might need to put any post deployment checks here

    

    - name: Get Cloudflare DNS record ID
      run: |
        DNS_RECORD_NAME="${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}"
        DNS_RECORD_ID=$(curl -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records?name=$DNS_RECORD_NAME" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        -H "Content-Type: application/json" | jq -r '.result[0].id')
        echo "DNS_RECORD_ID=$DNS_RECORD_ID" >> $GITHUB_ENV
    
    
    # We may not use a LB 
    # Need to add variables for the service name and the port
    
    - name: Update Cloudflare DNS record for master
      if: github.ref == 'refs/heads/master'
      run: |
        
        NEW_IP=$(kubectl get service resume-www -o jsonpath='{.status.loadBalancer.ingress[0].ip}' --namespace=$NAMESPACE)
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ env.DNS_RECORD_ID }}" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        -H "Content-Type: application/json" \
        --data '{"type":"A","name":"${{ env.SUB_DOMAIN}}.${{ env.DOMAIN_NAME }}","content":"'$NEW_IP'","ttl":120,"proxied":false}'

    - name: Update Cloudflare DNS record for dev
      if: github.ref == 'refs/heads/dev'
      run: |
        
        NEW_IP=$(kubectl get service resume-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}' --namespace=$NAMESPACE)
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ env.DNS_RECORD_ID }}" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        -H "Content-Type: application/json" \
        --data '{"type":"A","name":"${{ env.SUB_DOMAIN}}.${{ env.DOMAIN_NAME }}","content":"'$NEW_IP'","ttl":120,"proxied":false}'

    - name: Check dev website for successful deployment # DNS takes a while to update, so we need to wait a bit before we check the website. We could improve deploy time by fine tuning this
      run: |
        sleep 60
        curl -s https://${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }} | grep "Build: ${{ github.run_number }}" 
      if: github.ref == 'refs/heads/dev'
