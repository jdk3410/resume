name: Docker Build and Push to AWS ECR

on:
  push:
    paths-ignore:
      - 'README.md'
      - '.github/**'
  schedule:
    - cron: '0 14 1 * *' # We need to rebuild this monthly to get the latest security updates and to get the new LetsEncrypt certificate
                         # This only runs on the default branch, which is master. If we want to run this on both branches automatically we have to split this in to two workflows
  workflow_dispatch: # Manually run the workflow
    
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}
      TASK: ${{ vars.TASK }} # This is the name of the task definition for ECS
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      SUB_DOMAIN: ${{ github.ref == 'refs/heads/dev' && 'dev' || github.ref == 'refs/heads/master' && 'www' || '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm test
      run: |
        npm install
        npm test
      if: github.ref == 'refs/heads/dev' # The plan is to merge dev into master only if the tests pass
    
    - name: Set subdomain for dev branch
      run: echo "SUB_DOMAIN=dev" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/dev'
    
    - name: Set subdomain for master branch
      run: echo "SUB_DOMAIN=www" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/master'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Copy certificates from S3
      run: |
        mkdir -p ./letsencrypt/live/$DOMAIN_NAME/
        aws s3 cp s3://jdk3410certs/${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}/fullchain.pem ./letsencrypt/live/${{ env.DOMAIN_NAME }}/fullchain.pem
        aws s3 cp s3://jdk3410certs/${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}/privkey.pem ./letsencrypt/live/${{ env.DOMAIN_NAME }}/privkey.pem

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true
    
    - name: Update index.html with run number
      run: sed -i 's/RUN_NUMBER_PLACEHOLDER/${{ github.run_number }}/g' ./public/index.html

    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build --build-arg REACT_APP_GIT_BRANCH=${GITHUB_REF##*/} --build-arg REACT_APP_VERSION=${{ github.run_number }} --build-arg DOMAIN_NAME=$DOMAIN_NAME -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Register new task definition
      id: register
      run: |
        TASK_DEF=$(aws ecs register-task-definition --family ${{ env.TASK }}-${{ env.SUB_DOMAIN }} --requires-compatibilities FARGATE --network-mode awsvpc --execution-role-arn ${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }} --cpu 256 --memory 512 --container-definitions "[{\"name\":\"$TASK-$SUB_DOMAIN\",\"image\":\"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\",\"portMappings\":[{\"containerPort\":80,\"hostPort\":80,\"protocol\":\"tcp\"},{\"containerPort\":443,\"hostPort\":443,\"protocol\":\"tcp\"}],\"logConfiguration\":{\"logDriver\":\"awslogs\",\"options\":{\"awslogs-create-group\":\"true\",\"awslogs-group\":\"/ecs/$TASK-$SUB_DOMAIN\",\"awslogs-region\":\"us-east-1\",\"awslogs-stream-prefix\":\"ecs\"}}}]")
        TASK_DEF_ARN=$(echo $TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster ${{ env.TASK }} --service ${{ env.TASK }}-${{ env.SUB_DOMAIN }} --task-definition ${{ env.TASK_DEF_ARN }}

    - name: Wait for service to be stable # If we remove this step, it's possible more than one task is running on the cluster which confuses the next step
      run: |
        aws ecs wait services-stable --cluster ${{ env.TASK }} --services ${{ env.TASK }}-${{ env.SUB_DOMAIN }}
   

    - name: Get running task ARN
      id: get-task
      run: |
          CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters ${{ env.TASK }} --query 'clusters[?status==`ACTIVE`].clusterArn' --output text)
          if [ -z "$CLUSTER_EXISTS" ]; then
            echo "Cluster does not exist or is not active"
            exit 1
          fi
          FAMILY_EXISTS=$(aws ecs list-task-definitions --family-prefix ${{ env.TASK }}-${{ env.SUB_DOMAIN }} --status ACTIVE --query 'taskDefinitionArns' --output text)
          if [ -z "$FAMILY_EXISTS" ]; then
            echo "Family does not exist or is not active"
            exit 1
          fi
          TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.TASK }} --family ${{ env.TASK }}-${{ env.SUB_DOMAIN }} --desired-status RUNNING --query 'taskArns' --output text)
          if [ -z "$TASK_ARN" ]; then
            echo "No running tasks found"
            exit 1
          fi
          
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV

    - name: Update Route 53 DNS record for master # The step of updating DNS could be done with Service Discovery but that's a bit more complex
      if: github.ref == 'refs/heads/master'
      run: |
            NEW_IP=$(aws ecs describe-tasks --cluster ${{ env.TASK }} --tasks ${{ env.TASK_ARN }} --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs aws ec2 describe-network-interfaces --network-interface-ids | jq -r '.NetworkInterfaces[0].Association.PublicIp')
            aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch '{
              "Changes": [
                {
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                    "Name": "'${{ env.DOMAIN_NAME }}'",
                    "Type": "A",
                    "TTL": 300,
                    "ResourceRecords": [
                      {
                        "Value": "'$NEW_IP'"
                      }
                    ]
                  }
                }
              ]
            }'
        
    - name: Update Route 53 DNS record for dev
      if: github.ref == 'refs/heads/dev'
      run: |
            NEW_IP=$(aws ecs describe-tasks --cluster ${{ env.TASK }} --tasks ${{ env.TASK_ARN }} --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs aws ec2 describe-network-interfaces --network-interface-ids | jq -r '.NetworkInterfaces[0].Association.PublicIp')
            aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch '{
              "Changes": [
                {
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                    "Name": "'${{ env.SUB_DOMAIN}}.${{ env.DOMAIN_NAME }}'",
                    "Type": "A",
                    "TTL": 300,
                    "ResourceRecords": [
                      {
                        "Value": "'$NEW_IP'"
                      }
                    ]
                  }
                }
              ]
            }'

    - name: Run curl command and create success file
      run: |
        sleep 90
        curl -s https://dev.jdk3410.com | grep "Build: ${{ github.run_number }}" && touch curl-success.txt
      if: github.ref == 'refs/heads/dev'

    - name: Upload success file
      uses: actions/upload-artifact@v4
      with:
         name: curl-success
         path: curl-success.txt
      if: github.ref == 'refs/heads/dev'

  merge:
    needs: build
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download success file
        uses: actions/download-artifact@v4
        with:
          name: curl-success

      - name: Check for success file and create pull request
        run: |
          if [ -f curl-success.txt ]; then
             echo "Curl command was successful, creating pull request..."
             git config user.name "GitHub Actions"
             git config user.email "actions@github.com"
             git remote set-url origin https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@github.com/jdk3410/resume
             git fetch origin master
             git checkout -b merge-dev-to-master
             git pull --rebase origin merge-dev-to-master
             git merge --no-ff dev
             git push origin merge-dev-to-master
             echo $(gh pr create --repo jdk3410/resume --title "Merge dev into master" --body "This PR is automatically generated. Merging will happen automatically upon successful completion of all required checks and reviews." --base master --head merge-dev-to-master --label automerge -f)
          else
            echo "Curl command failed, not creating pull request."
            exit 1
          fi
        env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 