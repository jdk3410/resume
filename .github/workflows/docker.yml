name: Docker Build and Push to GCP Artifact Registry, deploy to GKE, and update Cloudflare DNS

on:
  push:
    branches:
       - master
       - dev
    paths-ignore:
      - 'README.md'
      - '.github/**'
  schedule:
    - cron: '0 14 1 * *' 
    # We need to rebuild this monthly to get the latest security updates and to get the new LetsEncrypt certificate
    # This only runs on the default branch, which is master. If we want to run this on both branches automatically we have to split this in to two workflows
  workflow_dispatch:  

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      
      SUB_DOMAIN: ${{ github.ref == 'refs/heads/dev' && 'dev' || github.ref == 'refs/heads/master' && 'www' || '' }}
      PROJECT_ID: ${{ secrets.DEV_GCP_PROJECT_ID }}
      GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}
      IMAGE: ${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.DEV_GCP_PROJECT_ID }}/${{ env.PROJECT }}-${{ env.SUB_DOMAIN }}/${{ env.PROJECT }}-${{ env.SUB_DOMAIN }}
      #IMAGE: us-east1-docker.pkg.dev/${{ secrets.DEV_GCP_PROJECT_ID }}/resume-dev/resume-dev
      BUCKET_NAME: ${{ vars.BUCKET_NAME }}
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      PROJECT: ${{ vars.PROJECT }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm test
      run: |
        npm install
        npm test
      if: github.ref == 'refs/heads/dev' # The plan is to merge dev into master only if the tests pass. Since the dev branch is being pulled into master, we don't need to run the tests again for master
      # End of CI

    - name: Set subdomain for dev branch
      run: echo "SUB_DOMAIN=dev" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/dev'
    
    - name: Set subdomain for master branch
      run: echo "SUB_DOMAIN=www" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/master'
    
      # Start of CD
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Google Cloud SDK for GCP Project
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    # If we decide to handle SSL through a k8s ingress, we can remove this step as well as the steps in Dockerfile
    - name: Copy certificates from GCS
      run: |
        mkdir -p ./letsencrypt/live/${{ env.DOMAIN_NAME }}/
        gsutil cp gs://${{ env.BUCKET_NAME }}/${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}/fullchain.pem ./letsencrypt/live/${{ env.DOMAIN_NAME }}/fullchain.pem
        gsutil cp gs://${{ env.BUCKET_NAME }}/${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}/privkey.pem ./letsencrypt/live/${{ env.DOMAIN_NAME }}/privkey.pem

    - name: Update index.html with run number
      run: sed -i 's/RUN_NUMBER_PLACEHOLDER/${{ github.run_number }}/g' ./public/index.html
    
    - name: Install Google Cloud SDK
      run: |
        curl https://sdk.cloud.google.com | bash
        source /home/runner/.bashrc
        gcloud version
    
    
    
    - name: Authenticate Docker to Artifact Registry
      run: gcloud auth configure-docker us-east1-docker.pkg.dev

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}:${{ github.sha }}
          build-args: |
            REACT_APP_GIT_BRANCH=${{ github.ref_name }}
            REACT_APP_VERSION=${{ github.run_number }}
            DOMAIN_NAME=${{ env.DOMAIN_NAME }}
      
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}

    - name: Set up Google Cloud SDK for GKE Project
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GKE_PROJECT_ID }}
        
    
    - name: Set NAMESPACE
      run: echo "NAMESPACE=$(echo ${{ env.DOMAIN_NAME }} | sed 's/\.com//')" >> $GITHUB_ENV
    
    - name: Install gcloud components
      run: |
        gcloud components install kubectl gke-gcloud-auth-plugin

    - name: Deploy to GKE
      run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
          kubectl set image deployment/${{ env.PROJECT }}-${{ env.SUB_DOMAIN }} ${{ env.PROJECT }}-${{ env.SUB_DOMAIN }}=${{ env.IMAGE }}:${{ github.sha }} --namespace=$NAMESPACE
          kubectl rollout status deployment/${{ env.PROJECT }}-${{ env.SUB_DOMAIN }} --namespace=$NAMESPACE

    
    # We could set up an ingress to save on IP usage but we'd need to handle grabbing/updating the SSL certificate here

    - name: Get Cloudflare DNS record ID
      run: |
        DNS_RECORD_NAME="${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}"
        DNS_RECORD_ID=$(curl -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records?name=$DNS_RECORD_NAME" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        -H "Content-Type: application/json" | jq -r '.result[0].id')
        echo "DNS_RECORD_ID=$DNS_RECORD_ID" >> $GITHUB_ENV
    
    
    
    # Need to add variables for the service name and the port
    # The IPs are mostly static so this won't change often
    
    - name: Update Cloudflare DNS record for master
      if: github.ref == 'refs/heads/master'
      run: |
        
        NEW_IP=$(kubectl get service ${{ env.PROJECT }}-${{ env.SUB_DOMAIN }}-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' --namespace=$NAMESPACE)
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ env.DNS_RECORD_ID }}" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        -H "Content-Type: application/json" \
        --data '{"type":"A","name":"${{ env.SUB_DOMAIN}}.${{ env.DOMAIN_NAME }}","content":"'$NEW_IP'","ttl":120,"proxied":false}'

    - name: Update Cloudflare DNS record for dev
      if: github.ref == 'refs/heads/dev'
      run: |
        
        NEW_IP=$(kubectl get service ${{ env.PROJECT }}-${{ env.SUB_DOMAIN }}-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' --namespace=$NAMESPACE)
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ env.DNS_RECORD_ID }}" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        -H "Content-Type: application/json" \
        --data '{"type":"A","name":"${{ env.SUB_DOMAIN}}.${{ env.DOMAIN_NAME }}","content":"'$NEW_IP'","ttl":120,"proxied":false}'

    - name: Check dev website for successful deployment # kubectl rollout doesn't exit until the rollout is complete, so the wait time here can be less/nothing 
      run: |
        sleep 5
        curl -s https://${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }} | grep "Build: ${{ github.run_number }}" 
      if: github.ref == 'refs/heads/dev'
