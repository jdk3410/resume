name: Docker Build and Push to AWS ECR

on:
  push:
    paths-ignore:
      - '.github/**'
      
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Register new task definition
      id: register
      run: |
        TASK_DEF=$(aws ecs register-task-definition --family resume --requires-compatibilities FARGATE --network-mode awsvpc --execution-role-arn ${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }} --cpu 512 --memory 1024 --container-definitions "[{\"name\":\"resume\",\"image\":\"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\",\"portMappings\":[{\"containerPort\":80,\"hostPort\":80,\"protocol\":\"tcp\"},{\"containerPort\":443,\"hostPort\":443,\"protocol\":\"tcp\"}],\"logConfiguration\":{\"logDriver\":\"awslogs\",\"options\":{\"awslogs-create-group\":\"true\",\"awslogs-group\":\"/ecs/resume\",\"awslogs-region\":\"us-east-1\",\"awslogs-stream-prefix\":\"ecs\"}}}]")
        TASK_DEF_ARN=$(echo $TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster resume --service resume --task-definition ${{ env.TASK_DEF_ARN }}

    - name: Wait for service to be stable
      run: |
        aws ecs wait services-stable --cluster resume --services resume

    - name: Get running task ARN
      id: get-task
      run: |
          TASK_ARNS=$(aws ecs list-tasks --cluster resume --family resume --desired-status RUNNING --query 'taskArns' --output text)
          if [ -z "$TASK_ARNS" ]; then
            echo "No running tasks found"
            exit 1
          fi
          TASK_ARN=$(aws ecs describe-tasks --cluster resume --tasks $TASK_ARNS --query 'sort_by(tasks,&startedAt)[::-1][0].taskArn' --output text)
          if [ -z "$TASK_ARN" ]; then
            echo "No task ARN found"
            exit 1
          fi
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV

    - name: Update Route 53 DNS record
      run: |
        # Get the new IP address
        NEW_IP=$(aws ecs describe-tasks --cluster resume --tasks ${{ env.TASK_ARN }} --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs aws ec2 describe-network-interfaces --network-interface-ids | jq -r '.NetworkInterfaces[0].Association.PublicIp')

        # Update the DNS record
        aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch '{
            "Changes": [
                {
                    "Action": "UPSERT",
                    "ResourceRecordSet": {
                        "Name": "jdk3410.com",
                        "Type": "A",
                        "TTL": 300,
                        "ResourceRecords": [
                            {
                                "Value": "'$NEW_IP'"
                            }
                        ]
                    }
                }
            ]
        }'