name: Docker Build and Push to AWS ECR

on:
  push:
    paths-ignore:
      - 'README.md'
      - '.github/**'
  schedule:
    - cron: '0 13 1 * *' # We need to rebuild this monthly to get the latest security updates and to get the new LetsEncrypt certificate
  workflow_dispatch: # Manually run the workflow
    
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }} 
      SUB_DOMAIN: ${{ github.ref == 'refs/heads/dev' && 'dev' || github.ref == 'refs/heads/master' && 'www' || '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set subdomain for dev branch
      run: echo "SUB_DOMAIN=dev" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/dev'
    
    - name: Set subdomain for master branch
      run: echo "SUB_DOMAIN=www" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/master'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Copy certificates from S3
      run: |
        mkdir -p ./letsencrypt/live/$DOMAIN_NAME/
        aws s3 cp s3://jdk3410certs/${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}/fullchain.pem ./letsencrypt/live/${{ env.DOMAIN_NAME }}/fullchain.pem
        aws s3 cp s3://jdk3410certs/${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }}/privkey.pem ./letsencrypt/live/${{ env.DOMAIN_NAME }}/privkey.pem

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build --build-arg DOMAIN_NAME=$DOMAIN_NAME -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Register new task definition
      id: register
      run: |
        TASK_DEF=$(aws ecs register-task-definition --family resume-dev --requires-compatibilities FARGATE --network-mode awsvpc --execution-role-arn ${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }} --cpu 256 --memory 512 --container-definitions "[{\"name\":\"resume-dev\",\"image\":\"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\",\"portMappings\":[{\"containerPort\":80,\"hostPort\":80,\"protocol\":\"tcp\"},{\"containerPort\":443,\"hostPort\":443,\"protocol\":\"tcp\"}],\"logConfiguration\":{\"logDriver\":\"awslogs\",\"options\":{\"awslogs-create-group\":\"true\",\"awslogs-group\":\"/ecs/resume\",\"awslogs-region\":\"us-east-1\",\"awslogs-stream-prefix\":\"ecs\"}}}]")
        TASK_DEF_ARN=$(echo $TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster resume --service resume-dev --task-definition ${{ env.TASK_DEF_ARN }}

    - name: Wait for service to be stable # If we remove this step, it's possible more than one task is running on the cluster which confuses the next step
      run: |
        aws ecs wait services-stable --cluster resume --services resume-dev

    - name: Get running task ARN
      id: get-task
      run: |
          CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters resume --query 'clusters[?status==`ACTIVE`].clusterArn' --output text)
          if [ -z "$CLUSTER_EXISTS" ]; then
            echo "Cluster does not exist or is not active"
            exit 1
          fi
          FAMILY_EXISTS=$(aws ecs list-task-definitions --family-prefix resume-dev --status ACTIVE --query 'taskDefinitionArns' --output text)
          if [ -z "$FAMILY_EXISTS" ]; then
            echo "Family does not exist or is not active"
            exit 1
          fi
          TASK_ARN=$(aws ecs list-tasks --cluster resume --family resume-dev --desired-status RUNNING --query 'taskArns' --output text)
          if [ -z "$TASK_ARN" ]; then
            echo "No running tasks found"
            exit 1
          fi
          
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV

    - name: Update Route 53 DNS record for master
      if: github.ref == 'refs/heads/master'
      run: |
        NEW_IP=$(aws ecs describe-tasks --cluster *** --tasks ${{ env.TASK_ARN }} --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs aws ec2 describe-network-interfaces --network-interface-ids | jq -r '.NetworkInterfaces[0].Association.PublicIp')
            aws route53 change-resource-record-sets --hosted-zone-id *** --change-batch '{"Changes": [{"Action": "UPSERT","ResourceRecordSet": {"Name": "'${{ env.DOMAIN_NAME }}'","Type": "A","TTL": 300,"ResourceRecords": [{"Value": "'$NEW_IP'"}]}}]}'

    - name: Update Route 53 DNS record for dev
      if: github.ref == 'refs/heads/dev'
      run: |
            NEW_IP=$(aws ecs describe-tasks --cluster *** --tasks ${{ env.TASK_ARN }} --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs aws ec2 describe-network-interfaces --network-interface-ids | jq -r '.NetworkInterfaces[0].Association.PublicIp')
            aws route53 change-resource-record-sets --hosted-zone-id *** --change-batch '{"Changes": [{"Action": "UPSERT","ResourceRecordSet": {"Name": "'${{ env.SUB_DOMAIN}}.${{ env.DOMAIN_NAME }}'","Type": "A","TTL": 300,"ResourceRecords": [{"Value": "'$NEW_IP'"}]}}]}'
