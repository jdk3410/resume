name: Docker Build and Push to GCP Artifact Registry, deploy to Kubernetes

on:
  push:
    branches:
       - master
       - dev
    paths-ignore:
      - 'README.md'
      - '.github/**'
  schedule:
    - cron: '0 14 1 * *' 
    # We need to rebuild this monthly to get the latest security updates 
    # This only runs on the default branch, which is master. If we want to run this on both branches automatically we have to split this in to two workflows
  workflow_dispatch:  

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      PROJECT: ${{ vars.PROJECT }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for [skip ci] keyword
      id: check_skip_ci
      run: |
        if git log -1 --pretty=%B | grep -iq '\[skip ci\]'; then
          echo "Skipping CI as per commit message"
          exit 0
        fi

    - name: Run npm test
      run: |
        npm install
        npm test
      if: github.ref == 'refs/heads/dev' # The plan is to merge dev into master only if the tests pass. Since the dev branch is being pulled into master, we don't need to run the tests again for master
      # End of CI
     
    - name: Set subdomain for dev branch
      run: echo "SUB_DOMAIN=dev" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/dev'
    
    - name: Set subdomain for master branch
      run: echo "SUB_DOMAIN=www" >> $GITHUB_ENV
      if: github.ref == 'refs/heads/master'
    
    - name: Set IMAGE
      run: echo "IMAGE=${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.PROD_GCP_PROJECT_ID }}/${{ env.PROJECT }}-${{ env.SUB_DOMAIN }}/${{ env.PROJECT }}-${{ env.SUB_DOMAIN }}" >> $GITHUB_ENV  

      # Start of CD
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Google Cloud SDK for GCP Project
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.DEV_GCP_PROJECT_ID }}

    - name: Update index.html with run number
      run: sed -i 's/RUN_NUMBER_PLACEHOLDER/${{ github.run_number }}/g' ./public/index.html
    
    - name: Install Google Cloud SDK
      run: |
        curl https://sdk.cloud.google.com | bash -s -- --disable-prompts
        source /home/runner/.bashrc
        gcloud version
    
    - name: Authenticate Docker to Artifact Registry
      run: gcloud auth configure-docker ${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev --quiet

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}:${{ github.sha }}, ${{ env.IMAGE }}:latest
          build-args: |
            REACT_APP_GIT_BRANCH=${{ github.ref_name }}
            REACT_APP_VERSION=${{ github.run_number }}
            DOMAIN_NAME=${{ env.DOMAIN_NAME }}
      
    - name: Set NAMESPACE
      run: echo "NAMESPACE=$(echo ${{ env.DOMAIN_NAME }} | sed 's/\.com//')" >> $GITHUB_ENV
    
    - name: Install kubectl
      run: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Authenticate to Kubernetes cluster
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/${{ env.PROJECT }}-${{ env.SUB_DOMAIN }} ${{ env.PROJECT }}-${{ env.SUB_DOMAIN }}=${{ env.IMAGE }}:${{ github.sha }} --namespace=$NAMESPACE
        kubectl rollout status deployment/${{ env.PROJECT }}-${{ env.SUB_DOMAIN }} --namespace=$NAMESPACE
   
    - name: Check dev website for successful deployment
      run: |
        sleep 5
        curl -s https://${{ env.SUB_DOMAIN }}.${{ env.DOMAIN_NAME }} | grep "Build: ${{ github.run_number }}" 
      if: github.ref == 'refs/heads/dev'